# Simple Planning Workflow for {{PROJECT_NAME}}

## Task Management: plan.md-Driven

### Plan Tracking
- `- [ ]` = Pending
- `- [⚠️]` = In Progress  
- `- [x]` = Completed
- Add notes below tasks for decisions/blockers

### Daily Workflow
1. **Check plan.md:** Review current priorities
2. **Pick task:** Select highest priority uncompleted item
3. **Mark in-progress:** `- [⚠️] Task name`
4. **Implement:** Code following task requirements
5. **Test:** Verify implementation
6. **Commit:** Reference plan.md task in message
7. **Mark complete:** `- [x] Task name`
8. **Update plan:** Add notes or new tasks

## Git Standards

### Commits
```bash
git commit -m "feat: implement user auth (plan.md task 3)"
# Use: feat:, fix:, docs:, refactor:, test:
# Reference plan.md tasks when helpful
```

### Branch Strategy
- Feature branches for larger tasks: `git checkout -b "feature/description"`
- Direct commits to main for small fixes
- Keep commits atomic and focused

## Code Quality

### Python Projects (Pre-commit Setup)
```bash
cp templates/config/pre-commit .git/hooks/pre-commit
chmod +x .git/hooks/pre-commit
# Runs ruff check/format on staged Python files only
```

### Standards
- Follow language style guides (PEP 8, etc.)
- Write self-documenting code with clear names
- Add type hints and docstrings
- Test core functionality
- Keep functions focused

### File Organization
```
{{PROJECT_NAME}}/
├── src/{{PROJECT_NAME}}/     # Source code
├── tests/                    # Test files
├── docs/                     # Documentation
├── plan.md                   # Development plan
├── pyproject.toml           # Project config
└── README.md                # Project overview
```

## Integration Tips

### Plan Updates
- Version control plan.md changes
- Update estimates and notes as you work
- Add new tasks when discovered
- Remove/modify tasks as requirements change

### PR Process
- Reference plan.md tasks in PR descriptions
- Update plan.md status when PR merged
- Review plan.md changes as part of code review
 