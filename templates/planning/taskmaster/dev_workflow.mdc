---
title: TaskMaster Development Workflow for {{PROJECT_NAME}}
description: AI-powered task management for complex {{PROJECT_NAME}} projects with detailed breakdown and dependency tracking.
globs:
alwaysApply: true
---

# TaskMaster Development Workflow for {{PROJECT_NAME}}

## Task Management: AI-Powered

### Setup
```bash
task-master init --yes
task-master parse-prd scripts/prd.txt --num-tasks=15 --research
```

### MCP Tools (Recommended)
- `get_tasks`, `next_task`, `get_task` - Task viewing
- `update_subtask`, `update_task` - Progress logging  
- `add_task`, `expand_task` - Task creation/breakdown
- `add_dependency`, `validate_dependencies` - Dependencies

### CLI Fallback
```bash
task-master list              # View tasks
task-master next              # Find next task
task-master show <id>         # Task details
task-master set-status <id> --status=in-progress|done
```

## Daily Workflow

1. **Find next task:** `next_task` / `task-master next`
2. **Review details:** `get_task` / `task-master show <id>`
3. **Start work:** Set status to in-progress
4. **Create branch:** `git checkout -b "feature/description"`
5. **Implement:** Code following task requirements
6. **Log progress:** `update_subtask --prompt="implementation notes"`
7. **Test & commit:** NO need to reference task ID in commit (length <50 characters, no newlines). Commits should be atomic and focused.
8. **Mark complete:** Set status to done
9. **Create PR:** Reference task in description with Concise Title and Description

## Task Breakdown & Dependencies

### Complex Tasks
```bash
# MCP: expand_task(id="5", num="4", research=true)
task-master expand <id> --num=4 --research
```

### Dependencies
```bash
# MCP: add_dependency(id="8", dependsOn="3")
task-master add-dependency <id> --depends-on=<prerequisite>
```

### Validation
```bash
# MCP: validate_dependencies()
task-master validate-dependencies
```

## Git Integration

### Commits
```bash
git commit -m "feat: implement auth system (Task 4.2)"
# Reference task IDs for traceability
```

### PRs
- **Title:** Descriptive summary (no task IDs)
- **Body:** "Implements Task 4" or "Closes #123. Implements Task 4.2"

## Pre-commit Setup (Python)
```bash
cp templates/config/pre-commit .git/hooks/pre-commit
chmod +x .git/hooks/pre-commit
# Automatic ruff check/format on staged Python files
```

## AI Guidelines

### For AI Assistants
- Use MCP tools over CLI when available
- Update subtasks regularly with implementation details
- Continue to next logical task unless clarification needed
- Run quality checks before marking tasks complete

### Progress Logging
- Log key decisions in subtasks
- Update task details when requirements change
- Use `--research` flag for complex/unfamiliar tasks

---
*See `taskmaster_reference.mdc` for complete tool reference.*
*This workflow provides a general guideline. Adapt it based on your specific project needs, tools, and team practices.*
