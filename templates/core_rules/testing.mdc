---
description: Testing standards with strict NO MOCK policy
globs:
alwaysApply: false
---
# Testing Standards

## Core Principle: NO MOCKS, NO FAKE DATA
**STRICT RULE:** Never use mocks, stubs, or fake datasets. If real testing isn't possible, don't write tests.
- **No mock objects** - Use real implementations
- **No mock datasets** - Use actual sample data
- **No stub services** - Connect to real test instances
- **Alternative:** Ask user for sample data or test environment setup

## When to Write Tests
- **DO:** Test with real data and actual dependencies
- **DO:** Use test databases with real schemas
- **DO:** Test against actual file systems
- **DON'T:** Write tests if only mocks would work
- **DON'T:** Create artificial test scenarios

## Test Structure
```
tests/
  conftest.py          # Real test fixtures
  sample_data/         # Actual data samples (user-provided)
    valid/
    invalid/
  integration/         # Tests with real dependencies
    test_database.py   # Real DB connection
    test_api.py        # Real API calls
```

## Frameworks (Language-Specific)
- **Python:** `pytest` with real fixtures
- **JavaScript:** `vitest` or `jest` (no mocking libs)
- **Database:** Use test DB with real migrations
- **APIs:** Test against staging/local instances

## Writing Real Tests
```python
# GOOD: Real database test
def test_user_creation(real_db):
    user = User.create(email="test@example.com")
    assert real_db.query(User).filter_by(email="test@example.com").first()

# BAD: Mock test - DON'T WRITE THIS
# def test_user_creation(mock_db):  # NO!
#     mock_db.return_value = User()  # NO!
```

## Test Data Management
- **Sample data:** Request from user or use production samples
- **Test databases:** Use Docker containers or test instances
- **File fixtures:** Use actual files, not generated ones
- **API testing:** Point to real test endpoints

## CI Integration
- Run tests with real test environment
- Skip tests if environment unavailable
- Document required test infrastructure
- See [`ci-cd.mdc`](mdc:ci-cd.mdc) for pipeline setup

## When Tests Are Impossible
If real testing requires unavailable resources:
1. Document what's needed in `test_requirements.md`
2. Ask user to provide:
   - Sample datasets
   - Test environment access
   - API keys for test accounts
3. Skip testing until real resources available

---

*NO MOCKS. Real tests or no tests. Ask for help setting up real test environments.*