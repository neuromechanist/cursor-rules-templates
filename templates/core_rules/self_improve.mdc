---
description: Continuous rule improvement from learned patterns
globs:
alwaysApply: false
---
# Continuous Rule Improvement

## Improvement Triggers
- Pattern used 3+ times → Create rule
- Common failures in scratch_history.md → Add prevention rule
- Successful research.md solutions → Standardize
- Mature ideas.md concepts → Formalize
- Repeated PR feedback → Document standard

## Analysis Sources
1. **scratch_history.md:** Mine for anti-patterns
2. **research.md:** Extract proven solutions  
3. **ideas.md:** Promote design principles
4. **plan.md:** Identify workflow patterns
5. **Code reviews:** Track common feedback

## Rule Updates

### Add Rules When:
- New pattern appears 3+ times
- Common bug could be prevented
- Better approach discovered
- Security/performance pattern emerges

### Modify Rules When:
- Better examples found in codebase
- Edge cases discovered
- Implementation changed
- Related rules updated

### Remove Rules When:
- Tech stack changed
- Pattern deprecated
- No longer applicable

## Quality Checks
- **Actionable:** Clear what to do
- **Specific:** No ambiguity
- **Examples:** From actual code
- **Cross-referenced:** Link related rules

## Learning-Driven Creation
```python
# From scratch_history.md failure:
# "Database connections leaked"
# → Rule: Always use context managers

with get_db() as db:  # Good
    process(db)
# Not: db = get_db(); process(db); db.close()
```

## Maintenance Process
1. Weekly: Review scratch_history.md
2. After features: Update from research.md
3. Post-refactor: Revise affected rules
4. Quarterly: Audit all rules

---
*Rules evolve from experience. Document failures, standardize successes.*