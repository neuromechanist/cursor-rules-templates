---
title: AI-Assisted Development Workflow
description: Concise AI-powered workflow with documentation-driven development
globs:
alwaysApply: true
---

## Documentation-Driven Development
**Core Docs:** `plan.md` (tasks), `research.md` (solutions), `ideas.md` (concepts), `scratch_history.md` (failures)
**Usage:** Check ideas→research→implement→document failures

## Task Management
**Simple:** `plan.md` with `[ ]`→`[⚠️]`→`[🔬]`→`[x]`  
**Complex:** TaskMaster CLI/MCP tools for dependencies

## Development Flow
1. **Branch:** `git checkout -b feature/short-name`
2. **Research:** Update research.md with findings
3. **Code:** Follow existing patterns
4. **Test:** Real tests only (no mocks)
5. **Commit:** `feat: concise message` (<50 chars)
6. **PR:** Descriptive title, reference tasks in body

## Pre-commit (Python)
```bash
cp templates/config/pre-commit .git/hooks/pre-commit
chmod +x .git/hooks/pre-commit
# Auto runs: ruff check --fix --unsafe-fixes + format
```

## Standards
- **Python:** ruff, pytest, type hints
- **Tests:** Real data only, no mocks (see [`testing.mdc`](mdc:testing.mdc))
- **Commits:** No emojis, atomic, focused
- **Code:** Self-documenting, minimal comments

## AI Guidelines
- Check context docs before starting
- Document failures immediately
- Run quality checks before marking complete
- Continue unless blocked

## Rule Writing
```yaml
---
description: Brief purpose
globs: ["*.py"]  # Optional
alwaysApply: true
---
```
- Specific, actionable bullets
- Cross-reference: `[Name](mdc:file.mdc)`
- Update from scratch_history patterns

---
*Adapt for {{PROJECT_NAME}}'s needs.*