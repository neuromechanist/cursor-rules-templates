---
title: AI-Assisted Development Workflow for {{PROJECT_NAME}}
description: AI-powered development workflow for {{PROJECT_NAME}} projects with detailed breakdown and dependency tracking.
globs:
alwaysApply: true
---


## Documentation-Driven Development

### Core Documents
- **plan.md** / **TaskMaster**: Task tracking and phases
- **research.md**: Technical solutions and references
- **ideas.md**: Design concepts and exploration
- **scratch_history.md**: Failed attempts and lessons

### Task Management Options

**TaskMaster (Complex Projects):**
- MCP Server tools: `get_tasks`, `add_subtask`, `next_task`, `update_subtask`
- CLI fallback: `task-master list`, `task-master next`, `task-master show <id>`
- Integrates with research.md for technical context

**Simple Planning (Small Projects):**
- Use `plan.md` with markdown checkboxes: `- [ ]` ‚Üí `- [x]`
- Reference other docs: `(see research.md#section)`

## Core Development Process

### 1. Feature Branch Workflow
```bash
git checkout -b "feature/short-description"  # Descriptive names, no task IDs
```

### 2. Implementation Cycle
- **Understand:** Review task requirements and check ideas.md for context
- **Research:** Update research.md when exploring solutions
- **Plan:** Identify code changes and implementation steps
- **Code:** Follow project standards and best practices
- **Test:** Verify implementation meets requirements
- **Document:** Log failures in scratch_history.md
- **Commit:** Stage and commit with descriptive messages

### 3. Pre-Commit Quality Checks
- **Python projects:** Use `templates/config/pre-commit` script
  - Runs `ruff check --fix --unsafe-fixes` on staged Python files only
  - Runs `ruff format` on staged files
  - Re-stages modified files automatically
- **Install:** `cp templates/config/pre-commit .git/hooks/pre-commit && chmod +x .git/hooks/pre-commit`

### 4. Commit Standards
```bash
git commit -m "feat: implement user auth"
# Use: feat:, fix:, docs:, refactor:, test:, chore:
# Keep under 50 characters, no emojis
# Reference tasks only when critical for context
```

### 5. Pull Request Process
```bash
git push origin <branch-name>
# Create PR with descriptive title (no task IDs)
# Body: detail changes, reference issues/tasks optionally
```

## Task Status Management

**Task Master:**
- Set status: `update_task_status --status=in-progress|done`
- Log progress: `update_subtask --prompt="implementation notes"`

**Simple Planning:**
- Mark progress: `- [‚ö†Ô∏è] Task name` (in progress)
- Research phase: `- [üî¨] Task name` (researching)
- Complete: `- [x] Task name` (done)
- Add notes and cross-references to other docs

## Code Quality Standards

### Python Projects
- **Linting:** ruff (configured in pyproject.toml)
- **Testing:** pytest with coverage
- **Type hints:** Use mypy for type checking
- **Pre-commit:** Automatic ruff formatting on staged files

### General Standards
- Write clear, self-documenting code
- Use meaningful variable/function names
- Add docstrings for public APIs
- Test core functionality
- Keep functions focused and small

## Environment Management
```bash
# Activate environment before running commands
conda activate my-env  # or source .venv/bin/activate
pytest
mkdocs build
```

## Iterative Development (AI Guidelines)

### For AI Assistants
- **Context:** Check ideas.md and research.md before starting
- **Proactive:** Continue to next logical step unless blocked
- **Research:** Update research.md with technical findings
- **Learning:** Document failures in scratch_history.md
- **Quality:** Run pre-commit checks before final commit
- **Documentation:** Update all relevant docs when adding features
- **Testing:** Ensure tests pass before marking tasks complete

### Code Analysis Techniques
- **Symbol Search:** Use grep/ripgrep for exported functions/classes
- **Top-level exports:** `rg "export (function|const|class)"` (JS/TS), `rg "^def \w+\("` (Python)

## Rule Writing Standards (For Project Customization)

### Effective Rule Structure
```yaml
---
description: Brief, specific purpose
globs: ["*.py", "src/**"]  # Optional file patterns
alwaysApply: true  # true for core rules
---
```

### Content Guidelines
- **Specific and actionable** instructions
- **Bullet points** for clarity
- **Tool/command references** when relevant
- **Cross-references:** `[Rule Name](mdc:filename.mdc)`
- **Examples** for complex concepts

### Rule Maintenance
- Update based on actual code patterns
- Extract patterns from scratch_history.md
- Promote research.md solutions to rules
- Remove outdated practices
- Test rules for AI effectiveness
- Keep examples current and complete
- Cross-reference with documentation files

---

*Adapt this workflow for {{PROJECT_NAME}}'s specific needs, team size, and technology stack.*


---

*Customize these rule-writing guidelines for {{PROJECT_NAME}}'s team size, experience level, and development practices.*
